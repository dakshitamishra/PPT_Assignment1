Qs.1.
def NFG(a, n):
 
    if (n <= 0):
        print("List empty")
        return []
 
    
    stack = [0]*n
 
    
    freq = {}
    for i in a:
        freq[a[i]] = 0
    for i in a:
        freq[a[i]] += 1
 
    
    res = [0]*n
 
    
    top = -1
 
    
    top += 1
    stack[top] = 0
 
    
    for i in range(1, n):
 
        
        if (freq[a[stack[top]]] > freq[a[i]]):
            top += 1
            stack[top] = i
 
        else:
            
 
            while (top > -1 and freq[a[stack[top]]] < freq[a[i]]):
                res[stack[top]] = a[i]
                top -= 1
 
            # now push the current element
            top += 1
            stack[top] = i
 
    while (top > -1):
        res[stack[top]] = -1
        top -= 1
 
    
    return res
	
	
Qs.2.
def sortStack ( stack ):
    tmpStack = createStack()
    while(isEmpty(stack) == False):
         
        # pop out the first element
        tmp = top(stack)
        pop(stack)
 
        # while temporary stack is not
        # empty and top of stack is
        # lesser than temp
        while(isEmpty(tmpStack) == False and
             int(top(tmpStack)) < int(tmp)):
             
            # pop from temporary stack and
            # push it to the input stack
            push(stack,top(tmpStack))
            pop(tmpStack)
 
        # push temp in temporary of stack
        push(tmpStack,tmp)
     
    return tmpStack
	
Qs.3.
import math
 
st = []
st.append('1')
st.append('2')
st.append('3')
st.append('4')
st.append('5')
st.append('6')
st.append('7')
 
v = []
 
while(len(st) > 0):
    v.append(st[0])
    del st[0]
     
n = len(v)
 
if n%2==0:
    target = math.floor(n/2)
    for i in range(0, n):
        if i==target:
            continue
        st.append(v[i])
else:
    target = math.floor(n/2)
    for i in range(0, n):
        if i==target:
            continue
        st.append(v[i])
 
print("Printing stack after deletion of middle:", end = " ")
 
while (len(st) > 0):
    p = st[0]
    del st[0]
    print(p, end = " ")

Qs.4.
from queue import Queue
 
# Function to check if given queue element
# can be sorted into another queue using a
# stack.
def checkSorted(n, q):
    st = []
    expected = 1
    fnt = None
 
    # while given Queue is not empty.
    while (not q.empty()):
        fnt = q.queue[0]
        q.get()
 
        # if front element is the
        # expected element
        if (fnt == expected):
            expected += 1
 
        else:
             
            # if stack is empty, put the element
            if (len(st) == 0):
                st.append(fnt)
 
            # if top element is less than element which
            # need to be puted, then return false.
            elif (len(st) != 0 and st[-1] < fnt):
                return False
 
            # else put into the stack.
            else:
                st.append(fnt)
 
        # while expected element are coming
        # from stack, pop them out.
        while (len(st) != 0 and
                   st[-1] == expected):
            st.pop()
            expected += 1
 
    # if the final expected element value is equal
    # to initial Queue size and the stack is empty.
    if (expected - 1 == n and len(st) == 0):
        return True
 
    return False
	
	
Qs.5.
st = [];
 
# Function to push digits into stack
def push_digits(number):
 
    while (number != 0):
        st.append(number % 10);
        number = int(number / 10);
 
# Function to reverse the number
def reverse_number(number):
     
    # Function call to push number's
    # digits to stack
    push_digits(number);
     
    reverse = 0;
    i = 1;
     
    # Popping the digits and forming
    # the reversed number
    while (len(st) > 0):
        reverse = reverse + (st[len(st) - 1] * i);
        st.pop();
        i = i * 10;
     
    # Return the reversed number formed
    return reverse;

Qs.6.
from collections import deque
 
def reverse_first_k(q, k):
    solve(q, k)
    s = len(q) - k
    for _ in range(s):
        x = q.popleft()
        q.append(x)
    return q
 
def solve(q, k):
    if k == 0:
        return
    e = q.popleft()
    solve(q, k - 1)
    q.append(e)
 
# Driver code
queue = deque([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
k = 5
queue = reverse_first_k(queue, k)
 
# Printing queue
while queue:
    print(queue.popleft(), end=' ')

Qs.7.
def removeConsecutiveSame(v):
 
    n = len(v)
 
    # Start traversing the sequence
    i = 0
    while(i < n - 1):
         
        # Compare the current string with
        # next one Erase both if equal
        if ((i + 1) < len(v)) and (v[i] == v[i + 1]):
         
            # Erase function delete the element and
            # also shifts other element that's why
            # i is not updated
            v = v[:i]
            v = v[:i]
 
            # Update i, as to check from previous
            # element again
            if (i > 0):
                i -= 1
 
            # Reduce sequence size
            n = n - 2
         
        # Increment i, if not equal
        else:
            i += 1
     
    # Return modified size
    return len(v[:i - 1])
     
# Driver Code
if __name__ == '__main__':
    v = ["tom", "jerry", "jerry", "tom"]
    print(removeConsecutiveSame(v))
	
Qs.8.
def leftsmaller(arr, n, SE):
 
    # create an empty stack
    sta = []
    # Traverse all array elements
    # compute nearest smaller elements of every element
    for i in range(n):
         
        # Keep removing top element from S while the top
        # element is greater than or equal to arr[i]
        while(sta != [] and sta[len(sta)-1] >= arr[i]):
            sta.pop()
 
        # Store the smaller element of current element
        if(sta != []):
            SE[i]=sta[len(sta)-1]
        # If all elements in S were greater than arr[i]
        else:
            SE[i]=0
 
        # push this element
        sta.append(arr[i])
 


def findMaxDiff(arr, n):
    ls=[0]*n 
    rs=[0]*n 
 
    
    leftsmaller(arr, n, ls)
     
    leftsmaller(arr[::-1], n, rs)
 
    
    
    res = -1
    for i in range(n):
        res = max(res, abs(ls[i] - rs[n-1-i]))
    # return maximum difference b/w LS  & RRS
    return res
